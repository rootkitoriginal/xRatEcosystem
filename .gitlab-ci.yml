# GitLab CI/CD Pipeline para xRat Ecosystem

stages:
  - test
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

# Cache para dependências do Node.js
cache:
  paths:
    - backend/node_modules/
    - frontend/node_modules/

# Job para testar o backend
test:backend:
  stage: test
  image: node:18-alpine
  before_script:
    - cd backend
    - npm ci
  script:
    - npm run test || echo "No tests configured"
    - npm run lint || echo "No linting configured"
  only:
    - main
    - merge_requests

# Job para testar o frontend
test:frontend:
  stage: test
  image: node:18-alpine
  before_script:
    - cd frontend
    - npm ci
  script:
    - npm run test || echo "No tests configured"
    - npm run lint || echo "No linting configured"
  only:
    - main
    - merge_requests

# Job para build do backend
build:backend:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  script:
    - docker build -t xrat-backend:$CI_COMMIT_SHORT_SHA ./backend
    - docker tag xrat-backend:$CI_COMMIT_SHORT_SHA xrat-backend:latest
  only:
    - main

# Job para build do frontend
build:frontend:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  script:
    - docker build -t xrat-frontend:$CI_COMMIT_SHORT_SHA ./frontend
    - docker tag xrat-frontend:$CI_COMMIT_SHORT_SHA xrat-frontend:latest
  only:
    - main

# Job para deploy (usando docker-compose)
deploy:production:
  stage: deploy
  image: docker/compose:latest
  script:
    - docker-compose down
    - docker-compose up -d --build
  only:
    - main
  when: manual  # Requer aprovação manual para deploy
  environment:
    name: production
    url: http://localhost:5173

# Job opcional: Verificar formatação do código
code:quality:
  stage: test
  image: node:18-alpine
  script:
    - echo "Checking code quality..."
    - cd backend && npm ci && cd ..
    - cd frontend && npm ci && cd ..
  allow_failure: true
  only:
    - merge_requests
